#!/bin/bash

set -a
source .env
set +a

DATABASE_ROOT="postgresql://$DATABASE_USER:$DATABASE_PASSWORD@$DATABASE_HOST:$DATABASE_PORT"
DATABASE_URL="$DATABASE_ROOT/$DATABASE_TABLE"

# Initializes the migration table
init() {
	local sql="CREATE TABLE migrations (
      id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
      source TEXT NOT NULL UNIQUE,
      timestamp TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
  );"
	psql "$DATABASE_URL" -c "$sql"
}

# Checks if a migration should be applied
should_apply() {
	local sql="SELECT * FROM migrations WHERE source = '$1';"
	psql "$DATABASE_URL" -c "$sql" | grep -q "0 rows"
}

# Applies a migration file and updates the migrations table
apply() {
	if psql "$DATABASE_URL" --set ON_ERROR_STOP=1 -f "$1"; then
		echo "Successfully applied $1 - $?"
		psql "$DATABASE_URL" -c "INSERT INTO migrations (source) VALUES ('$1')" >/dev/null 2>&1
	else
		echo "Failed to apply $1"
		exit 1
	fi
}

# Performs all migrations
migrate() {
	init >/dev/null 2>&1
	for m in migrations/*; do
		if should_apply "$m"; then
			echo "Applying $m"
			apply "$m"
		else
			echo "$m has already been applied"
		fi
	done
}

# Uses the root database to drop and add the table
reset() {
	psql $DATABASE_ROOT -c "DROP DATABASE hygofit"
	psql $DATABASE_ROOT -c "CREATE DATABASE hygofit"
}

# Shows all the migrations that have been applied
show() {
	psql $DATABASE_URL -c "SELECT * FROM migrations;"
}

# Connects to the database url
connect() {
	psql $DATABASE_URL
}

case "$1" in
migrate) migrate ;;
reset) reset ;;
show) show ;;
connect) connect ;;
*) echo "usage './manage.sh <migrate|reset|connect>'" ;;
esac
